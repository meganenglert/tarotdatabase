{"version":3,"sources":["interfaces/attribute.ts","components/deckInfoTabs/InfoTableRow.tsx","components/deckInfoTabs/DeckInfoTab.tsx","components/DeckDetailModal.tsx","components/DeckCard.tsx","components/DeckTable.tsx","components/Filters.tsx","components/AddDeckFormField.tsx","components/AddDeck.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fieldType","tab","InfoTableRow","attribute","value","className","display","type","text","singleSelect","multiSelect","DeckInfoTab","deck","getAttribute","Table","striped","Object","entries","filter","key","map","join","DeckDetailModal","show","onHide","ATTRIBUTES","Attributes","keys","includes","basicInfo","Modal","size","Header","closeButton","Title","title","Body","Row","Col","sm","Tabs","defaultActiveKey","Tab","eventKey","art","print","publication","Image","src","fluid","Footer","Button","variant","onClick","DeckCard","useState","setShow","Card","bg","style","cursor","Img","Text","artist","DeckTable","decks","xs","md","index","Filters","AddDeckFormField","handleChange","handleChangeMulti","Form","Group","as","controlId","onChange","Label","column","Control","placeholder","default","name","Select","values","valueName","enableMultiple","enableSearch","defaultValue","options","label","getValue","AddDeck","setDecks","showAdd","setShowAdd","attributes","DEFAULTDECK","newDeck","setNewDeck","getTab","ev","target","console","log","attr","onSubmit","preventDefault","Accordion","Item","App","DECKDATA","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45e69256.chunk.js","sourcesContent":["export interface Attribute {\r\n    attribute: string;\r\n    display: string;\r\n    type: fieldType;\r\n    tab: tab;\r\n    default: string;\r\n    values: string[];\r\n}\r\n\r\nexport enum fieldType {\r\n    text = \"text\",\r\n    singleSelect = \"single-select\",\r\n    multiSelect = \"multi-select\",\r\n    date = \"date\"\r\n}\r\n\r\nexport enum tab {\r\n    basicInfo = \"basic-info\",\r\n    art = \"art\",\r\n    print = \"print\",\r\n    publication = \"publication\"\r\n}","import '../../App.css';\r\nimport { Attribute, fieldType } from '../../interfaces/attribute';\r\n\r\ninterface iInfoTableRow {\r\n    attribute: Attribute,\r\n    value: string\r\n}\r\n\r\nexport function InfoTableRow({attribute, value} : iInfoTableRow): JSX.Element {\r\n\r\n    return <tr key={attribute.display}>\r\n        <td className=\"info-text field-title\">{attribute.display}</td>\r\n\r\n        {/* Text Entry */}\r\n        {attribute.type === fieldType.text && <td className=\"info-text text-entry\">\r\n            {value}\r\n        </td>}\r\n\r\n        {/* Single Select */}\r\n        {attribute.type === fieldType.singleSelect && <td className=\"info-text single-select\">\r\n            {value}\r\n        </td>}\r\n\r\n        {/* Multi Select */}\r\n        {attribute.type === fieldType.multiSelect && <td className=\"info-text multi-select\">\r\n            {value}\r\n        </td>}\r\n\r\n    </tr>;\r\n}","import { Table } from 'react-bootstrap';\r\nimport '../../App.css';\r\nimport { Attribute, fieldType, tab } from '../../interfaces/attribute';\r\nimport { Deck } from '../../interfaces/deck';\r\nimport { InfoTableRow } from './InfoTableRow';\r\n\r\n\r\ninterface iDeckInfoTab {\r\n    tab: tab,\r\n    deck: Deck,\r\n    getAttribute: (key: string) => Attribute;\r\n}\r\n\r\nexport function DeckInfoTab({tab, deck, getAttribute} : iDeckInfoTab): JSX.Element {\r\n\r\n    return <Table striped className=\"deck-info-tab\">\r\n        <tbody>\r\n            {Object.entries(deck).filter(([key, value]) => {\r\n                return getAttribute(key).tab === tab;\r\n            }).map(([key, value]) => {\r\n                var attribute: Attribute = getAttribute(key);\r\n                if (attribute.type === fieldType.multiSelect) {\r\n                    return <InfoTableRow key={attribute.attribute} attribute={attribute} value={value.join(\", \")}></InfoTableRow>;\r\n                }\r\n                return <InfoTableRow key={attribute.attribute} attribute={attribute} value={value}></InfoTableRow>\r\n            })}\r\n        </tbody>\r\n    </Table>;\r\n}","import { Button, Col, Modal, Row, Image, Tabs, Tab } from 'react-bootstrap';\r\nimport '../App.css';\r\nimport { Deck } from '../interfaces/deck';\r\nimport { DeckInfoTab } from './deckInfoTabs/DeckInfoTab';\r\nimport Attributes from \"../assets/deck-attributes.json\";\r\nimport { Attribute, fieldType, tab } from '../interfaces/attribute';\r\n\r\n\r\ninterface iDeckDetailModal {\r\n    show: boolean,\r\n    onHide: () => (void),\r\n    deck: Deck\r\n\r\n}\r\n\r\nexport function DeckDetailModal({ show, onHide, deck }: iDeckDetailModal): JSX.Element {\r\n\r\n    const ATTRIBUTES: Record<string, Attribute> = Attributes as Record<string, Attribute>;\r\n\r\n    function getAttribute(key: string): Attribute {\r\n        if (Object.keys(ATTRIBUTES).includes(key)) {\r\n            return ATTRIBUTES[key];\r\n        }\r\n        return { \"attribute\": \"ERROR\", \"display\": \"KEY NOT FOUND\", \"type\": fieldType.text, \"tab\": tab.basicInfo, \"default\": \"\", \"values\": [] };\r\n    }\r\n\r\n    return <Modal show={show}\r\n        onHide={onHide}\r\n        size=\"lg\">\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>{deck.title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <Row>\r\n                <Col sm={7}>\r\n                    <Tabs defaultActiveKey=\"basicinfo\">\r\n                        <Tab eventKey=\"basicinfo\" title=\"Basic Info\">\r\n                            <DeckInfoTab tab={tab.basicInfo} deck={deck} getAttribute={getAttribute}></DeckInfoTab>\r\n                        </Tab>\r\n                        <Tab eventKey=\"art\" title=\"Art\">\r\n                            <DeckInfoTab tab={tab.art} deck={deck} getAttribute={getAttribute}></DeckInfoTab>\r\n                        </Tab>\r\n                        <Tab eventKey=\"print\" title=\"Print\">\r\n                            <DeckInfoTab tab={tab.print} deck={deck} getAttribute={getAttribute}></DeckInfoTab>\r\n                        </Tab>\r\n                        <Tab eventKey=\"publication\" title=\"Publication\">\r\n                            <DeckInfoTab tab={tab.publication} deck={deck} getAttribute={getAttribute}></DeckInfoTab>\r\n                        </Tab>\r\n                    </Tabs>\r\n                </Col>\r\n                <Col sm={5} class-id=\"deckdetailmodal-image\">\r\n                    <Image src=\"https://i.imgur.com/jVLmj44.png\" fluid></Image>\r\n                </Col>\r\n            </Row>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={onHide}>\r\n                Close\r\n            </Button>\r\n        </Modal.Footer>\r\n    </Modal>;\r\n}","import React, { useState } from 'react';\nimport '../App.css';\nimport { Card } from 'react-bootstrap';\nimport { Deck } from '../interfaces/deck';\nimport { DeckDetailModal } from './DeckDetailModal';\n\ninterface iDeckCard {\n    deck: Deck;\n}\n\nexport function DeckCard({deck} : iDeckCard): JSX.Element {\n    \n    const [show, setShow] = useState(false);\n\n    function showDetails(deck : Deck) {\n        setShow(true);\n    }\n    function hideDetails() {\n        setShow(false);\n    }\n    return <> \n        <Card bg=\"light\" text=\"dark\" onClick={() => showDetails(deck)} \n            style={{ cursor: \"pointer\" }}>\n            <Card.Img src=\"https://i.imgur.com/jVLmj44.png\"/>\n            <Card.Body>\n                <Card.Title>{deck.title}</Card.Title>\n                <Card.Text>\n                    {deck.artist}\n                </Card.Text>\n            </Card.Body>\n        </Card>\n\n        <DeckDetailModal show={show} onHide={hideDetails} deck={deck}></DeckDetailModal>\n    </>;\n}","import React from 'react';\nimport '../App.css';\nimport { Col, Row } from 'react-bootstrap';\nimport { Deck } from '../interfaces/deck';\nimport { DeckCard } from './DeckCard';\n\ninterface iDeckTable {\n    decks: Deck[];\n}\n\nexport function DeckTable({ decks }: iDeckTable): JSX.Element {\n\n    return <Row xs={2} md={4} className=\"g-4\">\n        {decks.map((deck, index) => (<Col key={index}>\n            <DeckCard deck={deck}></DeckCard>\n        </Col>\n        ))}\n    </Row>;\n}","import React from 'react';\nimport '../App.css';\n\nexport function Filters(): JSX.Element {\n    return <div>\n        <h2>Filters</h2>\n    </div>;\n}\n","import { Col, Form, Row } from \"react-bootstrap\";\r\nimport { Attribute, fieldType } from \"../interfaces/attribute\";\r\nimport ReactHookSelect from \"react-hook-select\";\r\nimport \"react-hook-select/dist/styles.scss\";\r\nimport \"../App.css\";\r\n\r\ninterface addDeckFormField {\r\n    attribute: Attribute,\r\n    handleChange: (ev: React.ChangeEvent<HTMLFormElement>) => void,\r\n    handleChangeMulti: (attr: string, values: string[]) => void\r\n}\r\n\r\nexport function AddDeckFormField({ attribute, handleChange, handleChangeMulti }: addDeckFormField): JSX.Element {\r\n\r\n    return <div key={attribute.attribute}>\r\n        {attribute.type === fieldType.text &&\r\n            <Form.Group as={Row} className=\"mb-3 align-items-center not-multi-row\" controlId={attribute.attribute} onChange={handleChange}>\r\n                <Form.Label column sm=\"2\">\r\n                    <span className=\"attribute-label\">{attribute.display}</span>\r\n                </Form.Label>\r\n                <Col sm=\"10\">\r\n                    <Form.Control type=\"text\" placeholder={\"e.g. \" + attribute.default} name={attribute.attribute} />\r\n                </Col>\r\n            </Form.Group>\r\n        }\r\n        {attribute.type === fieldType.singleSelect &&\r\n            <Form.Group as={Row} className=\"mb-3 align-items-center not-multi-row\" controlId={attribute.attribute} onChange={handleChange}>\r\n                <Form.Label column sm=\"2\">\r\n                    <span className=\"attribute-label\">{attribute.display}</span>\r\n                </Form.Label>\r\n                <Col sm=\"10\">\r\n                    <Form.Select aria-label={attribute.attribute + \"Select\"} name={attribute.attribute}>\r\n                        {attribute.values.map(valueName => {\r\n                            return <option key={valueName} value={valueName}>{valueName}</option>;\r\n                        })}\r\n                    </Form.Select>\r\n                </Col>\r\n            </Form.Group>\r\n        }\r\n        {attribute.type === fieldType.multiSelect &&\r\n            <Row className=\"align-items-center\">\r\n                <Col sm=\"2\">\r\n                    <p className=\"attribute-label\">{attribute.display}</p>\r\n                </Col>\r\n                <Col sm=\"10\" className=\"multiselect\">\r\n                    <ReactHookSelect\r\n                        enableMultiple={true}\r\n                        enableSearch={true}\r\n                        placeholder={\"Choose \" + attribute.display}\r\n                        defaultValue={[]}\r\n                        options={attribute.values.map(value => {\r\n                            return { label: value, value: value }\r\n                        })}\r\n                        getValue={(values) => { handleChangeMulti(attribute.attribute, values)}}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        }\r\n    </div>;\r\n}","import React, { useState } from 'react';\r\nimport { Accordion, Button, Form, Modal } from 'react-bootstrap';\r\nimport '../App.css';\r\nimport { Deck } from '../interfaces/deck';\r\nimport { AddDeckFormField } from './AddDeckFormField';\r\nimport DEFAULTDECK from '../assets/default-deck.json';\r\nimport ATTRIBUTES from '../assets/deck-attributes.json';\r\nimport { Attribute, fieldType, tab } from '../interfaces/attribute';\r\n\r\n\r\ninterface iAddDeck {\r\n    decks: Deck[],\r\n    setDecks: (decks: Deck[]) => (void),\r\n    showAdd: boolean,\r\n    setShowAdd: (showAdd: boolean) => (void)\r\n}\r\n\r\nexport function AddDeck({ decks, setDecks, showAdd, setShowAdd }: iAddDeck): JSX.Element {\r\n\r\n    const attributes: Record<string, Attribute> = ATTRIBUTES as Record<string, Attribute>;\r\n\r\n    function getAttribute(key: string): Attribute {\r\n        if (Object.keys(ATTRIBUTES).includes(key)) {\r\n            return attributes[key];\r\n        }\r\n        return {\"attribute\":\"ERROR\", \"display\":\"KEY NOT FOUND\", \"type\":fieldType.text, \"tab\":tab.basicInfo, \"default\":\"\", \"values\":[]};\r\n    }\r\n\r\n    const [newDeck, setNewDeck] = useState<Deck>(DEFAULTDECK as Deck);\r\n\r\n    function getTab(tab: tab): object[] {\r\n        return Object.keys(newDeck).filter( (key) => {\r\n            return getAttribute(key).tab === tab;\r\n        })\r\n        .map( (key) => {\r\n            return <AddDeckFormField key={key} attribute={getAttribute(key)} handleChange={handleChange} handleChangeMulti={handleChangeMulti}></AddDeckFormField>;\r\n        });\r\n    }\r\n\r\n    function onShow(): void {\r\n        setShowAdd(true);\r\n    }\r\n    function onHide(): void {\r\n        setShowAdd(false);\r\n    }\r\n\r\n    function submitNewDeck(ev: React.ChangeEvent<HTMLFormElement>): void {\r\n        ev.preventDefault();\r\n        setDecks([ ...decks, newDeck ]);\r\n    }\r\n\r\n    function handleChange(ev: React.ChangeEvent<HTMLFormElement>): void {\r\n        setNewDeck({ ...newDeck, [ev.target.name]: ev.target.value});\r\n        console.log(ev.target.name);\r\n    } \r\n    function handleChangeMulti(attr: string, values: string[]): void {\r\n        setNewDeck({ ...newDeck, [attr]: values});\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <Button onClick={onShow}>+ Add new deck</Button>\r\n        </div>\r\n        <Modal show={showAdd}\r\n            onHide={onHide}\r\n            size=\"lg\">\r\n            <Modal.Header closeButton>\r\n                Submit a New Deck\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form onSubmit={submitNewDeck}>\r\n                    <Accordion defaultActiveKey=\"0\">\r\n                        <Accordion.Item eventKey=\"0\">\r\n                            <Accordion.Header>Basic Information</Accordion.Header>\r\n                            <Accordion.Body>\r\n                                {getTab(tab.basicInfo)}\r\n                            </Accordion.Body>\r\n                        </Accordion.Item>\r\n                        <Accordion.Item eventKey=\"1\">\r\n                            <Accordion.Header>Art</Accordion.Header>\r\n                            <Accordion.Body>\r\n                                {getTab(tab.art)}\r\n                            </Accordion.Body>\r\n                        </Accordion.Item>\r\n                        <Accordion.Item eventKey=\"2\">\r\n                            <Accordion.Header>Print</Accordion.Header>\r\n                            <Accordion.Body>\r\n                                {getTab(tab.print)}\r\n                            </Accordion.Body>\r\n                        </Accordion.Item>\r\n                        <Accordion.Item eventKey=\"3\">\r\n                            <Accordion.Header>Publication</Accordion.Header>\r\n                            <Accordion.Body>\r\n                                {getTab(tab.publication)}\r\n                            </Accordion.Body>\r\n                        </Accordion.Item>\r\n                    </Accordion>\r\n                    <div className=\"text-center\"><Button type=\"submit\" className=\"submitButton\">Submit</Button></div>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={onHide}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    </div>;\r\n}\r\n","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport DECKDATA from './assets/decks.json';\r\nimport { Deck } from './interfaces/deck';\r\nimport { DeckTable } from './components/DeckTable';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { Filters } from './components/Filters';\r\nimport { AddDeck } from './components/AddDeck';\r\n\r\nfunction App(): JSX.Element {\r\n  const [decks, setDecks] = useState<Deck[]>(DECKDATA as Deck[]);\r\n  const [showAdd, setShowAdd] = useState<boolean>(false);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>DeckFinder</h1>\r\n      <Row>\r\n        <Col xs={3}><Filters></Filters></Col>\r\n        <Col><DeckTable decks={decks}></DeckTable></Col>\r\n      </Row>\r\n      <Row>\r\n        <Col><AddDeck decks={decks} setDecks={setDecks} showAdd={showAdd} setShowAdd={setShowAdd}></AddDeck></Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}